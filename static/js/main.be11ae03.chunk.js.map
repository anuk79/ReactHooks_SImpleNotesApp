{"version":3,"sources":["Home/home.jsx","Header/header.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","useState","note","setNote","notes","setNotes","isButtonDisabled","setButtonDisable","useEffect","className","class","rows","id","onChange","event","target","value","type","disabled","onClick","draftNote","length","map","n","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAiEeA,G,MA7DF,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,OAESF,mBAAS,IAFlB,mBAEVG,EAFU,KAEHC,EAFG,OAG4BJ,oBAAS,GAHrC,mBAGVK,EAHU,KAGQC,EAHR,KASjB,OAJAC,oBAAU,WACRD,GAAkBL,IACjB,CAACA,IAGF,yBAAKO,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gCACb,0CACA,8BACE,yBAAKC,MAAM,cACT,8BACEA,MAAM,eACNC,KAAK,IACLC,GAAG,QACHC,SAAU,SAACC,GAAD,OAAWX,EAAQW,EAAMC,OAAOC,QAC1CA,MAAOd,IACT,4BACEe,KAAK,SACLP,MAAM,kCACNQ,SAAUZ,EACVa,QAAS,WACP,IAAMC,EAAS,sBAAOhB,GAAP,CAAcF,IAC7BG,EAASe,GACTjB,EAAQ,MAPZ,WAgBN,yBAAKM,UAAU,sBACZP,GACC,oCACE,2CACA,yBAAKO,UAAU,cACZP,IAKNE,EAAMiB,OAAS,GACd,oCACE,4CACCjB,EAAMkB,IAAI,SAAAC,GAAC,OAAI,yBAAKd,UAAU,sBAAsBc,WC3CpDC,G,MARA,WACb,OACE,yBAAKf,UAAU,cACb,qDCQSgB,MATf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.be11ae03.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './home.css';\n\nconst Home = () => {\n  const [note, setNote] = useState(\"\");\n  const [notes, setNotes] = useState([]);\n  const [isButtonDisabled, setButtonDisable] = useState(true);\n\n  useEffect(() => {\n    setButtonDisable(!note);\n  }, [note]);\n\n  return (\n    <div className=\"app-body\">\n      <div className=\"row\">\n        <div className=\"col-xs-12 col-md-4 add-notes\">\n          <h3>Add notes:</h3>\n          <form>\n            <div class=\"form-group\">\n              <textarea\n                class=\"form-control\"\n                rows=\"9\"\n                id=\"notes\"\n                onChange={(event) => setNote(event.target.value)}\n                value={note}></textarea>\n              <button\n                type=\"button\"\n                class=\"btn btn-lg btn-block app-button\"\n                disabled={isButtonDisabled}\n                onClick={() => {\n                  const draftNote = [...notes, note];\n                  setNotes(draftNote);\n                  setNote(\"\");\n                }\n                }\n              >\n                Save\n              </button>\n            </div>\n          </form>\n        </div>\n        <div className=\"col-xs-12 col-md-8\">\n          {note &&\n            <>\n              <h3>Draft note:</h3>\n              <div className=\"draft-note\">\n                {note}\n              </div>\n            </>\n          }\n\n          {notes.length > 0 &&\n            <>\n              <h3>Saved notes:</h3>\n              {notes.map(n => <div className=\"col-xs-3 note-item\">{n}</div>)}\n            </>\n          }\n\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default Home;","import React from 'react';\n\nimport './header.css';\n\nconst Header = () => {\n  return (\n    <div className=\"app-header\">\n      <h2>Let's create notes</h2>\n    </div>\n  )\n};\n\nexport default Header;","import React from 'react';\nimport './App.css';\n\nimport Home from './Home/home';\nimport Header from './Header/header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}